# -*- coding: utf-8 -*-
"""VGG Model Example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYyklELlcHoWIIrtWntB5QdMC7CU-j7T
"""

!pip install keras

from google.colab import files
uploaded = files.upload()

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
from keras.applications.vgg16 import VGG16

# load the model -- Load the weights for the VGG-16 model
model = VGG16()

# load an image from file --use the load_img() function to load the image and resize it to the required size of 224Ã—224 pixels.
image = load_img('mug.jpg', target_size=(224, 224))

# convert the image pixels to a numpy array --Next, so we can work with it in Keras. use the img_to_array() function for this.
image = img_to_array(image)

# reshape data for the model -- The network expects one or more images as input;
# that means the input array will need to be 4-dimensional: samples, rows, columns, and channels.
# We only have one sample (one image). We can reshape the array by calling reshape() and adding the extra dimension.
image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))

# prepare the image for the VGG model --Keras provides a function called preprocess_input() to prepare new input for the network.
image = preprocess_input(image)

# predict the probability across all output classes
yhat = model.predict(image)

# convert the probabilities to class labels
label = decode_predictions(yhat)

# retrieve the most likely result, e.g. highest probability
label = label[0][0]

# print the classification
print('%s (%.2f%%)' % (label[1], label[2]*100))